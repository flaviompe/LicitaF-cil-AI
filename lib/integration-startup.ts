// Sistema de inicializa√ß√£o autom√°tica das integra√ß√µes
import { completeBiddingIntegrator } from './complete-bidding-integrations'

class IntegrationStartup {
  private static instance: IntegrationStartup
  private isInitialized = false

  private constructor() {}

  static getInstance(): IntegrationStartup {
    if (!IntegrationStartup.instance) {
      IntegrationStartup.instance = new IntegrationStartup()
    }
    return IntegrationStartup.instance
  }

  async initialize(): Promise<void> {
    if (this.isInitialized) {
      console.log('‚ö†Ô∏è Integra√ß√µes j√° foram inicializadas')
      return
    }

    console.log('üöÄ INICIANDO SISTEMA COMPLETO DE INTEGRA√á√ïES DE LICITA√á√ïES')
    console.log('üìç Cobertura: Federal, Estadual e Municipal - Brasil inteiro')
    
    try {
      // Configurar listeners para eventos das integra√ß√µes
      this.setupEventListeners()
      
      // Inicializar todas as integra√ß√µes
      await completeBiddingIntegrator.startAllIntegrations()
      
      this.isInitialized = true
      
      const stats = completeBiddingIntegrator.getIntegrationStats()
      
      console.log('‚úÖ SISTEMA DE INTEGRA√á√ïES ATIVO!')
      console.log(`üìä Status das Integra√ß√µes:`)
      console.log(`   ‚Ä¢ Total de Plataformas: ${stats.totalPlatforms}`)
      console.log(`   ‚Ä¢ Plataformas Ativas: ${stats.enabledPlatforms}`)
      console.log(`   ‚Ä¢ √Çmbito Federal: ${stats.federalPlatforms} plataformas`)
      console.log(`   ‚Ä¢ √Çmbito Estadual: ${stats.statePlatforms} plataformas`)
      console.log(`   ‚Ä¢ √Çmbito Municipal: ${stats.municipalPlatforms} plataformas`)
      console.log(`   ‚Ä¢ Sincroniza√ß√µes Ativas: ${stats.activeSyncs}`)
      console.log('')
      console.log('üéØ COBERTURA NACIONAL COMPLETA ATIVADA!')
      console.log('üì° Monitoramento autom√°tico de licita√ß√µes em tempo real')
      
    } catch (error) {
      console.error('‚ùå ERRO CR√çTICO ao inicializar integra√ß√µes:', error)
      throw error
    }
  }

  private setupEventListeners(): void {
    // Listener para novas oportunidades
    completeBiddingIntegrator.on('new_opportunity', (opportunity) => {
      console.log(`üÜï Nova oportunidade detectada: ${opportunity.title} (${opportunity.organ})`)
    })

    // Listener para oportunidades ME/EPP
    completeBiddingIntegrator.on('me_opportunity', (opportunity) => {
      console.log(`üéØ OPORTUNIDADE ME/EPP: ${opportunity.title} - ${opportunity.organ}`)
    })

    // Listener para sincroniza√ß√µes conclu√≠das
    completeBiddingIntegrator.on('platform_synced', (data) => {
      console.log(`‚úÖ ${data.platformName}: ${data.opportunitiesCount} oportunidades sincronizadas`)
    })

    // Listener para erros
    completeBiddingIntegrator.on('sync_error', (data) => {
      console.error(`‚ùå Erro de sincroniza√ß√£o na plataforma ${data.platformId}: ${data.error}`)
    })

    // Listener para in√≠cio das integra√ß√µes
    completeBiddingIntegrator.on('integrations_started', (data) => {
      console.log(`üöÄ Integra√ß√µes iniciadas: ${data.enabledPlatforms}/${data.totalPlatforms} plataformas ativas`)
    })
  }

  getInitializationStatus(): {
    isInitialized: boolean
    stats?: any
  } {
    return {
      isInitialized: this.isInitialized,
      ...(this.isInitialized && { stats: completeBiddingIntegrator.getIntegrationStats() })
    }
  }
}

export const integrationStartup = IntegrationStartup.getInstance()

// Auto-inicializa√ß√£o quando o m√≥dulo for carregado
if (process.env.NODE_ENV === 'production' || process.env.AUTO_START_INTEGRATIONS === 'true') {
  integrationStartup.initialize().catch(error => {
    console.error('‚ùå FALHA CR√çTICA na inicializa√ß√£o autom√°tica das integra√ß√µes:', error)
  })
}