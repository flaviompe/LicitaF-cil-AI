#!/usr/bin/env python3
"""
Real-time Diagnostic Dashboard for SQLite to Neon Migration
Interactive web dashboard for system monitoring, debugging, and troubleshooting
"""

import asyncio
import json
import time
import logging
from typing import Dict, Any, List, Optional
from datetime import datetime, timedelta
from collections import deque
import threading

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Request, Depends
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import uvicorn
from pydantic import BaseModel

from troubleshooting_toolkit import TroubleshootingToolkit, Issue
from advanced_logging_system import LoggingManager

logger = logging.getLogger(__name__)

class ConnectionManager:
    """Manage WebSocket connections for real-time updates"""
    
    def __init__(self):
        self.active_connections: List[WebSocket] = []
    
    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)
    
    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)
    
    async def send_personal_message(self, message: str, websocket: WebSocket):
        await websocket.send_text(message)
    
    async def broadcast(self, message: str):
        for connection in self.active_connections:
            try:
                await connection.send_text(message)
            except:
                # Connection might be closed
                pass

class DiagnosticDashboard:
    """Main diagnostic dashboard application"""
    
    def __init__(self):
        self.app = FastAPI(title="Licitações Diagnostic Dashboard", version="1.0.0")
        self.connection_manager = ConnectionManager()
        self.toolkit = TroubleshootingToolkit()
        self.logging_manager = LoggingManager({
            'level': logging.INFO,
            'console_logging': True,
            'file_logging': True
        })
        
        # Data storage
        self.metrics_history: deque = deque(maxlen=1000)
        self.issues_history: deque = deque(maxlen=100)
        self.alerts_history: deque = deque(maxlen=50)
        
        # Background monitoring
        self.monitoring_active = False
        self.monitor_task: Optional[asyncio.Task] = None
        
        self._setup_routes()
        self._setup_static_files()
        
    def _setup_static_files(self):
        """Setup static file serving"""
        try:
            self.app.mount("/static", StaticFiles(directory="static"), name="static")
            self.templates = Jinja2Templates(directory="templates")
        except:
            # Create minimal templates inline
            pass
    
    def _setup_routes(self):
        """Setup API routes"""
        
        @self.app.get("/", response_class=HTMLResponse)
        async def dashboard_home(request: Request):
            """Main dashboard page"""
            return self._render_dashboard_html()
        
        @self.app.get("/api/health")
        async def health_check():
            """Health check endpoint"""
            health_report = await self.toolkit.run_diagnostics()
            return JSONResponse(health_report)
        
        @self.app.get("/api/metrics")
        async def get_current_metrics():
            """Get current system metrics"""
            diagnostics = await self.toolkit.run_diagnostics()
            return JSONResponse({
                'timestamp': datetime.now().isoformat(),
                'health_status': diagnostics['health_report']['overall_status'],
                'components': diagnostics['health_report']['components'],
                'active_issues': len(diagnostics['detected_issues']),
                'recommendations': diagnostics['recommendations']
            })\n        \n        @self.app.get(\"/api/issues\")\n        async def get_active_issues():\n            \"\"\"Get currently active issues\"\"\"\n            diagnostics = await self.toolkit.run_diagnostics()\n            return JSONResponse({\n                'timestamp': datetime.now().isoformat(),\n                'issues': diagnostics['detected_issues'],\n                'total_count': len(diagnostics['detected_issues'])\n            })\n        \n        @self.app.get(\"/api/logs\")\n        async def get_recent_logs(level: str = \"INFO\", limit: int = 100):\n            \"\"\"Get recent logs\"\"\"\n            # This would integrate with the logging system\n            return JSONResponse({\n                'timestamp': datetime.now().isoformat(),\n                'logs': [],  # Would be populated from logging system\n                'level': level,\n                'limit': limit\n            })\n        \n        @self.app.get(\"/api/performance\")\n        async def get_performance_metrics():\n            \"\"\"Get performance metrics\"\"\"\n            diagnostics = await self.toolkit.run_diagnostics()\n            \n            # Extract performance metrics from components\n            performance_data = {\n                'timestamp': datetime.now().isoformat(),\n                'system': diagnostics['health_report']['components'].get('system', {}).get('metrics', {}),\n                'database': diagnostics['health_report']['components'].get('database', {}).get('metrics', {}),\n                'cache': diagnostics['health_report']['components'].get('cache', {}).get('metrics', {}),\n                'application': diagnostics['health_report']['components'].get('application', {}).get('metrics', {})\n            }\n            \n            # Store for history\n            self.metrics_history.append(performance_data)\n            \n            return JSONResponse(performance_data)\n        \n        @self.app.get(\"/api/history/metrics\")\n        async def get_metrics_history(hours: int = 1):\n            \"\"\"Get historical metrics data\"\"\"\n            cutoff_time = datetime.now() - timedelta(hours=hours)\n            \n            # Filter history by time\n            recent_metrics = [\n                metric for metric in self.metrics_history\n                if datetime.fromisoformat(metric['timestamp']) > cutoff_time\n            ]\n            \n            return JSONResponse({\n                'timestamp': datetime.now().isoformat(),\n                'time_range_hours': hours,\n                'metrics': recent_metrics,\n                'count': len(recent_metrics)\n            })\n        \n        @self.app.post(\"/api/recovery/{issue_id}\")\n        async def trigger_recovery(issue_id: str):\n            \"\"\"Trigger recovery for specific issue\"\"\"\n            # This would trigger recovery for a specific issue\n            # For now, return success\n            return JSONResponse({\n                'success': True,\n                'message': f'Recovery triggered for issue {issue_id}',\n                'timestamp': datetime.now().isoformat()\n            })\n        \n        @self.app.get(\"/api/diagnostics/run\")\n        async def run_full_diagnostics():\n            \"\"\"Run comprehensive diagnostics\"\"\"\n            diagnostics = await self.toolkit.run_diagnostics()\n            return JSONResponse(diagnostics)\n        \n        @self.app.websocket(\"/ws\")\n        async def websocket_endpoint(websocket: WebSocket):\n            \"\"\"WebSocket endpoint for real-time updates\"\"\"\n            await self.connection_manager.connect(websocket)\n            try:\n                while True:\n                    # Keep connection alive\n                    await websocket.receive_text()\n            except WebSocketDisconnect:\n                self.connection_manager.disconnect(websocket)\n    \n    def _render_dashboard_html(self) -> str:\n        \"\"\"Render the main dashboard HTML\"\"\"\n        return \"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Licitações - Diagnostic Dashboard</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <style>\n        * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n        }\n        \n        body {\n            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n            background: #f5f5f5;\n            color: #333;\n        }\n        \n        .header {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n            padding: 1rem 2rem;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n        \n        .header h1 {\n            margin: 0;\n            font-size: 1.8rem;\n        }\n        \n        .header .subtitle {\n            font-size: 0.9rem;\n            opacity: 0.9;\n            margin-top: 0.25rem;\n        }\n        \n        .container {\n            max-width: 1400px;\n            margin: 0 auto;\n            padding: 2rem;\n        }\n        \n        .dashboard-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n            gap: 1.5rem;\n            margin-bottom: 2rem;\n        }\n        \n        .card {\n            background: white;\n            border-radius: 12px;\n            padding: 1.5rem;\n            box-shadow: 0 4px 20px rgba(0,0,0,0.05);\n            border: 1px solid #e0e0e0;\n            transition: transform 0.2s, box-shadow 0.2s;\n        }\n        \n        .card:hover {\n            transform: translateY(-2px);\n            box-shadow: 0 8px 30px rgba(0,0,0,0.1);\n        }\n        \n        .card-title {\n            font-size: 1.1rem;\n            font-weight: 600;\n            margin-bottom: 1rem;\n            color: #333;\n            display: flex;\n            align-items: center;\n            gap: 0.5rem;\n        }\n        \n        .status-indicator {\n            width: 12px;\n            height: 12px;\n            border-radius: 50%;\n            display: inline-block;\n        }\n        \n        .status-healthy { background: #4caf50; }\n        .status-warning { background: #ff9800; }\n        .status-critical { background: #f44336; }\n        .status-degraded { background: #ff5722; }\n        .status-error { background: #9c27b0; }\n        \n        .metric-value {\n            font-size: 2rem;\n            font-weight: 700;\n            color: #667eea;\n            margin-bottom: 0.5rem;\n        }\n        \n        .metric-label {\n            font-size: 0.9rem;\n            color: #666;\n            margin-bottom: 1rem;\n        }\n        \n        .metric-details {\n            font-size: 0.8rem;\n            color: #888;\n        }\n        \n        .issues-list {\n            max-height: 400px;\n            overflow-y: auto;\n        }\n        \n        .issue-item {\n            padding: 0.75rem;\n            margin-bottom: 0.5rem;\n            border-left: 4px solid #ddd;\n            background: #f9f9f9;\n            border-radius: 4px;\n        }\n        \n        .issue-item.severity-critical { border-left-color: #f44336; }\n        .issue-item.severity-high { border-left-color: #ff5722; }\n        .issue-item.severity-medium { border-left-color: #ff9800; }\n        .issue-item.severity-low { border-left-color: #4caf50; }\n        \n        .issue-title {\n            font-weight: 600;\n            margin-bottom: 0.25rem;\n        }\n        \n        .issue-description {\n            font-size: 0.85rem;\n            color: #666;\n            margin-bottom: 0.5rem;\n        }\n        \n        .issue-time {\n            font-size: 0.75rem;\n            color: #999;\n        }\n        \n        .controls {\n            display: flex;\n            gap: 1rem;\n            margin-bottom: 2rem;\n            flex-wrap: wrap;\n        }\n        \n        .btn {\n            padding: 0.75rem 1.5rem;\n            border: none;\n            border-radius: 8px;\n            cursor: pointer;\n            font-size: 0.9rem;\n            font-weight: 500;\n            transition: all 0.2s;\n            text-decoration: none;\n            display: inline-block;\n        }\n        \n        .btn-primary {\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            color: white;\n        }\n        \n        .btn-primary:hover {\n            transform: translateY(-1px);\n            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\n        }\n        \n        .btn-secondary {\n            background: #6c757d;\n            color: white;\n        }\n        \n        .btn-danger {\n            background: #dc3545;\n            color: white;\n        }\n        \n        .chart-container {\n            position: relative;\n            height: 300px;\n            margin-top: 1rem;\n        }\n        \n        .loading {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 2rem;\n            color: #666;\n        }\n        \n        .auto-refresh {\n            position: fixed;\n            top: 100px;\n            right: 20px;\n            background: white;\n            padding: 0.5rem 1rem;\n            border-radius: 20px;\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n            font-size: 0.8rem;\n            color: #666;\n            z-index: 1000;\n        }\n        \n        .refresh-dot {\n            width: 8px;\n            height: 8px;\n            background: #4caf50;\n            border-radius: 50%;\n            display: inline-block;\n            margin-right: 0.5rem;\n            animation: pulse 2s infinite;\n        }\n        \n        @keyframes pulse {\n            0% { opacity: 1; }\n            50% { opacity: 0.5; }\n            100% { opacity: 1; }\n        }\n        \n        @media (max-width: 768px) {\n            .container {\n                padding: 1rem;\n            }\n            \n            .dashboard-grid {\n                grid-template-columns: 1fr;\n            }\n            \n            .controls {\n                flex-direction: column;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>🔍 Licitações - Diagnostic Dashboard</h1>\n        <div class=\"subtitle\">Real-time system monitoring and troubleshooting</div>\n    </div>\n    \n    <div class=\"auto-refresh\">\n        <span class=\"refresh-dot\"></span>\n        Auto-refresh: 30s\n    </div>\n    \n    <div class=\"container\">\n        <div class=\"controls\">\n            <button class=\"btn btn-primary\" onclick=\"refreshDashboard()\">🔄 Refresh Now</button>\n            <button class=\"btn btn-secondary\" onclick=\"runDiagnostics()\">🔧 Run Diagnostics</button>\n            <button class=\"btn btn-danger\" onclick=\"toggleMonitoring()\">📊 Toggle Monitoring</button>\n        </div>\n        \n        <div class=\"dashboard-grid\">\n            <!-- System Status Card -->\n            <div class=\"card\">\n                <div class=\"card-title\">\n                    <span class=\"status-indicator\" id=\"system-status-indicator\"></span>\n                    System Health\n                </div>\n                <div class=\"metric-value\" id=\"system-status-text\">Loading...</div>\n                <div class=\"metric-label\">Overall Status</div>\n                <div class=\"metric-details\" id=\"system-details\"></div>\n            </div>\n            \n            <!-- CPU Usage Card -->\n            <div class=\"card\">\n                <div class=\"card-title\">💻 CPU Usage</div>\n                <div class=\"metric-value\" id=\"cpu-usage\">--</div>\n                <div class=\"metric-label\">Percentage</div>\n                <div class=\"metric-details\" id=\"cpu-details\"></div>\n            </div>\n            \n            <!-- Memory Usage Card -->\n            <div class=\"card\">\n                <div class=\"card-title\">🧠 Memory Usage</div>\n                <div class=\"metric-value\" id=\"memory-usage\">--</div>\n                <div class=\"metric-label\">Percentage</div>\n                <div class=\"metric-details\" id=\"memory-details\"></div>\n            </div>\n            \n            <!-- Database Connections Card -->\n            <div class=\"card\">\n                <div class=\"card-title\">🗄️ Database</div>\n                <div class=\"metric-value\" id=\"db-connections\">--</div>\n                <div class=\"metric-label\">Active Connections</div>\n                <div class=\"metric-details\" id=\"db-details\"></div>\n            </div>\n            \n            <!-- Cache Performance Card -->\n            <div class=\"card\">\n                <div class=\"card-title\">⚡ Cache</div>\n                <div class=\"metric-value\" id=\"cache-hit-rate\">--</div>\n                <div class=\"metric-label\">Hit Rate (%)</div>\n                <div class=\"metric-details\" id=\"cache-details\"></div>\n            </div>\n            \n            <!-- Active Issues Card -->\n            <div class=\"card\">\n                <div class=\"card-title\">🚨 Active Issues</div>\n                <div class=\"metric-value\" id=\"active-issues-count\">--</div>\n                <div class=\"metric-label\">Current Issues</div>\n                <div class=\"issues-list\" id=\"issues-list\">\n                    <div class=\"loading\">Loading issues...</div>\n                </div>\n            </div>\n        </div>\n        \n        <!-- Performance Charts -->\n        <div class=\"dashboard-grid\">\n            <div class=\"card\">\n                <div class=\"card-title\">📈 CPU & Memory Trends</div>\n                <div class=\"chart-container\">\n                    <canvas id=\"performance-chart\"></canvas>\n                </div>\n            </div>\n            \n            <div class=\"card\">\n                <div class=\"card-title\">📊 Database Performance</div>\n                <div class=\"chart-container\">\n                    <canvas id=\"database-chart\"></canvas>\n                </div>\n            </div>\n        </div>\n    </div>\n    \n    <script>\n        // Dashboard state\n        let performanceChart;\n        let databaseChart;\n        let monitoringEnabled = true;\n        let refreshInterval;\n        \n        // WebSocket connection for real-time updates\n        const ws = new WebSocket(`ws://${window.location.host}/ws`);\n        \n        ws.onmessage = function(event) {\n            const data = JSON.parse(event.data);\n            handleRealtimeUpdate(data);\n        };\n        \n        // Initialize dashboard\n        document.addEventListener('DOMContentLoaded', function() {\n            initializeCharts();\n            refreshDashboard();\n            startAutoRefresh();\n        });\n        \n        function initializeCharts() {\n            // Performance chart\n            const perfCtx = document.getElementById('performance-chart').getContext('2d');\n            performanceChart = new Chart(perfCtx, {\n                type: 'line',\n                data: {\n                    labels: [],\n                    datasets: [{\n                        label: 'CPU %',\n                        data: [],\n                        borderColor: '#667eea',\n                        backgroundColor: 'rgba(102, 126, 234, 0.1)',\n                        tension: 0.4\n                    }, {\n                        label: 'Memory %',\n                        data: [],\n                        borderColor: '#f093fb',\n                        backgroundColor: 'rgba(240, 147, 251, 0.1)',\n                        tension: 0.4\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: true,\n                            max: 100\n                        }\n                    },\n                    plugins: {\n                        legend: {\n                            position: 'top'\n                        }\n                    }\n                }\n            });\n            \n            // Database chart\n            const dbCtx = document.getElementById('database-chart').getContext('2d');\n            databaseChart = new Chart(dbCtx, {\n                type: 'bar',\n                data: {\n                    labels: ['Active', 'Idle', 'Idle in Transaction'],\n                    datasets: [{\n                        label: 'Connections',\n                        data: [0, 0, 0],\n                        backgroundColor: [\n                            'rgba(76, 175, 80, 0.8)',\n                            'rgba(255, 152, 0, 0.8)',\n                            'rgba(244, 67, 54, 0.8)'\n                        ],\n                        borderColor: [\n                            '#4caf50',\n                            '#ff9800',\n                            '#f44336'\n                        ],\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                }\n            });\n        }\n        \n        async function refreshDashboard() {\n            try {\n                // Get current metrics\n                const response = await fetch('/api/metrics');\n                const data = await response.json();\n                \n                updateDashboardData(data);\n                \n                // Get performance data\n                const perfResponse = await fetch('/api/performance');\n                const perfData = await perfResponse.json();\n                \n                updateCharts(perfData);\n                \n                // Get active issues\n                const issuesResponse = await fetch('/api/issues');\n                const issuesData = await issuesResponse.json();\n                \n                updateIssuesList(issuesData);\n                \n            } catch (error) {\n                console.error('Error refreshing dashboard:', error);\n            }\n        }\n        \n        function updateDashboardData(data) {\n            // Update system status\n            const statusIndicator = document.getElementById('system-status-indicator');\n            const statusText = document.getElementById('system-status-text');\n            \n            statusIndicator.className = `status-indicator status-${data.health_status}`;\n            statusText.textContent = data.health_status.toUpperCase();\n            \n            // Update system metrics\n            const systemMetrics = data.components.system?.metrics || {};\n            \n            document.getElementById('cpu-usage').textContent = \n                systemMetrics.cpu_percent ? `${systemMetrics.cpu_percent.toFixed(1)}%` : '--';\n            \n            document.getElementById('memory-usage').textContent = \n                systemMetrics.memory_percent ? `${systemMetrics.memory_percent.toFixed(1)}%` : '--';\n            \n            // Update database metrics\n            const dbMetrics = data.components.database?.metrics || {};\n            \n            document.getElementById('db-connections').textContent = \n                dbMetrics.active_connections || '--';\n            \n            // Update cache metrics\n            const cacheMetrics = data.components.cache?.metrics || {};\n            \n            document.getElementById('cache-hit-rate').textContent = \n                cacheMetrics.hit_rate_percent ? `${cacheMetrics.hit_rate_percent.toFixed(1)}%` : '--';\n        }\n        \n        function updateCharts(perfData) {\n            const now = new Date().toLocaleTimeString();\n            \n            // Update performance chart\n            const systemData = perfData.system || {};\n            \n            if (performanceChart.data.labels.length > 20) {\n                performanceChart.data.labels.shift();\n                performanceChart.data.datasets[0].data.shift();\n                performanceChart.data.datasets[1].data.shift();\n            }\n            \n            performanceChart.data.labels.push(now);\n            performanceChart.data.datasets[0].data.push(systemData.cpu_percent || 0);\n            performanceChart.data.datasets[1].data.push(systemData.memory_percent || 0);\n            performanceChart.update('none');\n            \n            // Update database chart\n            const dbData = perfData.database || {};\n            databaseChart.data.datasets[0].data = [\n                dbData.active_connections || 0,\n                dbData.idle_connections || 0,\n                dbData.idle_in_transaction || 0\n            ];\n            databaseChart.update('none');\n        }\n        \n        function updateIssuesList(issuesData) {\n            const issuesList = document.getElementById('issues-list');\n            const issuesCount = document.getElementById('active-issues-count');\n            \n            issuesCount.textContent = issuesData.total_count || 0;\n            \n            if (issuesData.issues && issuesData.issues.length > 0) {\n                issuesList.innerHTML = issuesData.issues.map(issue => `\n                    <div class=\"issue-item severity-${issue.severity}\">\n                        <div class=\"issue-title\">${issue.title}</div>\n                        <div class=\"issue-description\">${issue.description}</div>\n                        <div class=\"issue-time\">${new Date(issue.detected_at).toLocaleString()}</div>\n                    </div>\n                `).join('');\n            } else {\n                issuesList.innerHTML = '<div style=\"text-align: center; color: #4caf50; padding: 1rem;\">✅ No active issues</div>';\n            }\n        }\n        \n        function startAutoRefresh() {\n            if (refreshInterval) clearInterval(refreshInterval);\n            refreshInterval = setInterval(refreshDashboard, 30000); // 30 seconds\n        }\n        \n        function stopAutoRefresh() {\n            if (refreshInterval) {\n                clearInterval(refreshInterval);\n                refreshInterval = null;\n            }\n        }\n        \n        async function runDiagnostics() {\n            const btn = event.target;\n            const originalText = btn.textContent;\n            btn.textContent = '🔧 Running...';\n            btn.disabled = true;\n            \n            try {\n                const response = await fetch('/api/diagnostics/run');\n                const data = await response.json();\n                \n                // Update dashboard with diagnostic results\n                updateDashboardData({\n                    health_status: data.health_report.overall_status,\n                    components: data.health_report.components\n                });\n                \n                updateIssuesList({\n                    issues: data.detected_issues,\n                    total_count: data.detected_issues.length\n                });\n                \n                alert('Diagnostics completed successfully!');\n            } catch (error) {\n                alert('Error running diagnostics: ' + error.message);\n            } finally {\n                btn.textContent = originalText;\n                btn.disabled = false;\n            }\n        }\n        \n        function toggleMonitoring() {\n            monitoringEnabled = !monitoringEnabled;\n            \n            if (monitoringEnabled) {\n                startAutoRefresh();\n                event.target.textContent = '📊 Stop Monitoring';\n                document.querySelector('.refresh-dot').style.display = 'inline-block';\n            } else {\n                stopAutoRefresh();\n                event.target.textContent = '📊 Start Monitoring';\n                document.querySelector('.refresh-dot').style.display = 'none';\n            }\n        }\n        \n        function handleRealtimeUpdate(data) {\n            // Handle real-time WebSocket updates\n            if (data.type === 'metrics_update') {\n                updateDashboardData(data.data);\n            } else if (data.type === 'new_issue') {\n                refreshDashboard(); // Refresh to show new issues\n            }\n        }\n    </script>\n</body>\n</html>\n        \"\"\"\n    \n    async def start_background_monitoring(self):\n        \"\"\"Start background monitoring task\"\"\"\n        if self.monitoring_active:\n            return\n        \n        self.monitoring_active = True\n        self.monitor_task = asyncio.create_task(self._background_monitor())\n        logger.info(\"Started background monitoring\")\n    \n    async def stop_background_monitoring(self):\n        \"\"\"Stop background monitoring\"\"\"\n        self.monitoring_active = False\n        if self.monitor_task:\n            self.monitor_task.cancel()\n            try:\n                await self.monitor_task\n            except asyncio.CancelledError:\n                pass\n        logger.info(\"Stopped background monitoring\")\n    \n    async def _background_monitor(self):\n        \"\"\"Background monitoring loop\"\"\"\n        try:\n            while self.monitoring_active:\n                # Run diagnostics\n                diagnostics = await self.toolkit.run_diagnostics()\n                \n                # Store metrics history\n                self.metrics_history.append({\n                    'timestamp': datetime.now().isoformat(),\n                    'health_status': diagnostics['health_report']['overall_status'],\n                    'components': diagnostics['health_report']['components']\n                })\n                \n                # Store issues history\n                for issue in diagnostics['detected_issues']:\n                    self.issues_history.append(issue)\n                \n                # Broadcast updates to connected clients\n                if self.connection_manager.active_connections:\n                    update_data = {\n                        'type': 'metrics_update',\n                        'data': {\n                            'timestamp': datetime.now().isoformat(),\n                            'health_status': diagnostics['health_report']['overall_status'],\n                            'components': diagnostics['health_report']['components'],\n                            'active_issues': len(diagnostics['detected_issues'])\n                        }\n                    }\n                    \n                    await self.connection_manager.broadcast(json.dumps(update_data))\n                \n                # Wait before next check\n                await asyncio.sleep(30)  # 30 seconds\n                \n        except asyncio.CancelledError:\n            logger.info(\"Background monitoring cancelled\")\n        except Exception as e:\n            logger.error(f\"Error in background monitoring: {e}\")\n    \n    async def run_server(self, host: str = \"0.0.0.0\", port: int = 8080):\n        \"\"\"Run the dashboard server\"\"\"\n        # Start background monitoring\n        await self.start_background_monitoring()\n        \n        try:\n            # Run the server\n            config = uvicorn.Config(\n                self.app, \n                host=host, \n                port=port, \n                log_level=\"info\"\n            )\n            server = uvicorn.Server(config)\n            await server.serve()\n        finally:\n            # Stop background monitoring\n            await self.stop_background_monitoring()\n\n# Factory function\ndef create_diagnostic_dashboard() -> DiagnosticDashboard:\n    \"\"\"Create configured diagnostic dashboard\"\"\"\n    return DiagnosticDashboard()\n\n# CLI entry point\nif __name__ == \"__main__\":\n    import argparse\n    \n    parser = argparse.ArgumentParser(description='Licitações Diagnostic Dashboard')\n    parser.add_argument('--host', default='0.0.0.0', help='Host to bind to')\n    parser.add_argument('--port', type=int, default=8080, help='Port to bind to')\n    parser.add_argument('--debug', action='store_true', help='Enable debug mode')\n    \n    args = parser.parse_args()\n    \n    # Setup logging\n    logging.basicConfig(\n        level=logging.DEBUG if args.debug else logging.INFO,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    \n    # Create and run dashboard\n    dashboard = create_diagnostic_dashboard()\n    \n    logger.info(f\"Starting diagnostic dashboard at http://{args.host}:{args.port}\")\n    \n    try:\n        asyncio.run(dashboard.run_server(args.host, args.port))\n    except KeyboardInterrupt:\n        logger.info(\"Dashboard stopped by user\")"