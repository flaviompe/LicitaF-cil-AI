// Adicionar ao schema.prisma existente

model Plan {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  interval    String   // monthly, yearly
  features    String[] // Array de features JSON
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  subscriptions Subscription[]
}

model Subscription {
  id                String             @id @default(cuid())
  userId            String
  planId            String
  status            SubscriptionStatus @default(ACTIVE)
  stripeCustomerId  String?
  stripePriceId     String?
  stripeSubscriptionId String?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan Plan @relation(fields: [planId], references: [id])

  @@unique([userId])
}

model Payment {
  id               String        @id @default(cuid())
  userId           String
  subscriptionId   String?
  amount           Float
  currency         String        @default("BRL")
  status           PaymentStatus @default(PENDING)
  stripePaymentId  String?
  paymentMethod    String?
  description      String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invoice {
  id               String        @id @default(cuid())
  userId           String
  subscriptionId   String?
  invoiceNumber    String        @unique
  amount           Float
  currency         String        @default("BRL")
  status           InvoiceStatus @default(DRAFT)
  dueDate          DateTime
  paidAt           DateTime?
  stripeInvoiceId  String?
  downloadUrl      String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Atualizar modelo User para incluir relacionamentos
model User {
  // ... campos existentes
  
  subscriptions Subscription[]
  payments     Payment[]
  invoices     Invoice[]
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}